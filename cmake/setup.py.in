#!/usr/bin/env python3
# > pyroma .
# ------------------------------
# Checking .
# Found Pillow
# ------------------------------
# Final rating: 10/10
# Your cheese is so fresh most people think it's a cream: Mascarpone
# ------------------------------

import os
import re
import struct
import subprocess
import sys
import warnings

from setuptools import Extension, setup
from setuptools.command.build_ext import build_ext


def get_version():
    version_file = "src/PIL/_version.py"
    with open(version_file) as f:
        exec(compile(f.read(), version_file, "exec"))
    return locals()["__version__"]


PILLOW_VERSION = get_version()
FREETYPE_ROOT = None
HARFBUZZ_ROOT = None
FRIBIDI_ROOT = None
IMAGEQUANT_ROOT = None
JPEG2K_ROOT = None
JPEG_ROOT = None
LCMS_ROOT = None
TIFF_ROOT = None
ZLIB_ROOT = None
FUZZING_BUILD = "LIB_FUZZING_ENGINE" in os.environ

if sys.platform == "win32" and sys.version_info >= (3, 11):
    import atexit

    atexit.register(
        lambda: warnings.warn(
            f"Pillow {PILLOW_VERSION} does not support Python "
            f"{sys.version_info.major}.{sys.version_info.minor} and does not provide "
            "prebuilt Windows binaries. We do not recommend building from source on "
            "Windows.",
            RuntimeWarning,
        )
    )


_IMAGING = ("decode", "encode", "map", "display", "outline", "path")

_LIB_IMAGING = (
    "Access",
    "AlphaComposite",
    "Resample",
    "Reduce",
    "Bands",
    "BcnDecode",
    "BitDecode",
    "Blend",
    "Chops",
    "ColorLUT",
    "Convert",
    "ConvertYCbCr",
    "Copy",
    "Crop",
    "Dib",
    "Draw",
    "Effects",
    "EpsEncode",
    "File",
    "Fill",
    "Filter",
    "FliDecode",
    "Geometry",
    "GetBBox",
    "GifDecode",
    "GifEncode",
    "HexDecode",
    "Histo",
    "JpegDecode",
    "JpegEncode",
    "Matrix",
    "ModeFilter",
    "Negative",
    "Offset",
    "Pack",
    "PackDecode",
    "Palette",
    "Paste",
    "Quant",
    "QuantOctree",
    "QuantHash",
    "QuantHeap",
    "PcdDecode",
    "PcxDecode",
    "PcxEncode",
    "Point",
    "RankFilter",
    "RawDecode",
    "RawEncode",
    "Storage",
    "SgiRleDecode",
    "SunRleDecode",
    "TgaRleDecode",
    "TgaRleEncode",
    "Unpack",
    "UnpackYCC",
    "UnsharpMask",
    "XbmDecode",
    "XbmEncode",
    "ZipDecode",
    "ZipEncode",
    "TiffDecode",
    "Jpeg2KDecode",
    "Jpeg2KEncode",
    "BoxBlur",
    "QuantPngQuant",
    "codec_fd",
)

DEBUG = False


class DependencyException(Exception):
    pass


class RequiredDependencyException(Exception):
    pass


PLATFORM_MINGW = os.name == "nt" and "GCC" in sys.version
PLATFORM_PYPY = hasattr(sys, "pypy_version_info")


def _dbg(s, tp=None):
    if DEBUG:
        if tp:
            print(s % tp)
            return
        print(s)


def _find_library_dirs_ldconfig():
    # Based on ctypes.util from Python 2

    if sys.platform.startswith("linux") or sys.platform.startswith("gnu"):
        if struct.calcsize("l") == 4:
            machine = os.uname()[4] + "-32"
        else:
            machine = os.uname()[4] + "-64"
        mach_map = {
            "x86_64-64": "libc6,x86-64",
            "ppc64-64": "libc6,64bit",
            "sparc64-64": "libc6,64bit",
            "s390x-64": "libc6,64bit",
            "ia64-64": "libc6,IA-64",
        }
        abi_type = mach_map.get(machine, "libc6")

        # Assuming GLIBC's ldconfig (with option -p)
        # Alpine Linux uses musl that can't print cache
        args = ["/sbin/ldconfig", "-p"]
        expr = rf".*\({abi_type}.*\) => (.*)"
        env = dict(os.environ)
        env["LC_ALL"] = "C"
        env["LANG"] = "C"

    elif sys.platform.startswith("freebsd"):
        args = ["/sbin/ldconfig", "-r"]
        expr = r".* => (.*)"
        env = {}

    try:
        p = subprocess.Popen(
            args, stderr=subprocess.DEVNULL, stdout=subprocess.PIPE, env=env
        )
    except OSError:  # E.g. command not found
        return []
    [data, _] = p.communicate()
    if isinstance(data, bytes):
        data = data.decode("latin1")

    dirs = []
    for dll in re.findall(expr, data):
        dir = os.path.dirname(dll)
        if dir not in dirs:
            dirs.append(dir)
    return dirs


def _add_directory(path, subdir, where=None):
    if subdir is None:
        return
    subdir = os.path.realpath(subdir)
    if os.path.isdir(subdir) and subdir not in path:
        if where is None:
            _dbg("Appending path %s", subdir)
            path.append(subdir)
        else:
            _dbg("Inserting path %s", subdir)
            path.insert(where, subdir)
    elif subdir in path and where is not None:
        path.remove(subdir)
        path.insert(where, subdir)


def _find_include_file(self, include):
    for directory in self.compiler.include_dirs:
        _dbg("Checking for include file %s in %s", (include, directory))
        if os.path.isfile(os.path.join(directory, include)):
            _dbg("Found %s", include)
            return 1
    return 0


def _find_library_file(self, library):
    ret = self.compiler.find_library_file(self.compiler.library_dirs, library)
    if ret:
        _dbg("Found library %s at %s", (library, ret))
    else:
        _dbg("Couldn't find library %s in %s", (library, self.compiler.library_dirs))
    return ret


def _find_include_dir(self, dirname, include):
    for directory in self.compiler.include_dirs:
        _dbg("Checking for include file %s in %s", (include, directory))
        if os.path.isfile(os.path.join(directory, include)):
            _dbg("Found %s in %s", (include, directory))
            return True
        subdir = os.path.join(directory, dirname)
        _dbg("Checking for include file %s in %s", (include, subdir))
        if os.path.isfile(os.path.join(subdir, include)):
            _dbg("Found %s in %s", (include, subdir))
            return subdir


def _cmd_exists(cmd):
    return any(
        os.access(os.path.join(path, cmd), os.X_OK)
        for path in os.environ["PATH"].split(os.pathsep)
    )


def _pkg_config(name):
    command = os.environ.get("PKG_CONFIG", "pkg-config")
    for keep_system in (True, False):
        try:
            command_libs = [command, "--libs-only-L", name]
            command_cflags = [command, "--cflags-only-I", name]
            stderr = None
            if keep_system:
                command_libs.append("--keep-system-libs")
                command_cflags.append("--keep-system-cflags")
                stderr = subprocess.DEVNULL
            if not DEBUG:
                command_libs.append("--silence-errors")
                command_cflags.append("--silence-errors")
            libs = (
                subprocess.check_output(command_libs, stderr=stderr)
                .decode("utf8")
                .strip()
                .replace("-L", "")
            )
            cflags = (
                subprocess.check_output(command_cflags)
                .decode("utf8")
                .strip()
                .replace("-I", "")
            )
            return libs, cflags
        except Exception:
            pass


class pil_build_ext(build_ext):
    class feature:
        features = [
            "zlib",
            "jpeg",
            "tiff",
            "freetype",
            "raqm",
            "lcms",
            "webp",
            "webpmux",
            "jpeg2000",
            "imagequant",
            "xcb",
        ]

        required = {"jpeg", "zlib"}
        vendor = set()

        def __init__(self):
            for f in self.features:
                setattr(self, f, None)

        def require(self, feat):
            return feat in self.required

        def want(self, feat):
            return getattr(self, feat) is None

        def want_vendor(self, feat):
            return feat in self.vendor

        def __iter__(self):
            yield from self.features

    feature = feature()

    user_options = (
        build_ext.user_options
        + [(f"disable-{x}", None, f"Disable support for {x}") for x in feature]
        + [(f"enable-{x}", None, f"Enable support for {x}") for x in feature]
        + [
            (f"vendor-{x}", None, f"Use vendored version of {x}")
            for x in ("raqm", "fribidi")
        ]
        + [
            ("disable-platform-guessing", None, "Disable platform guessing on Linux"),
            ("debug", None, "Debug logging"),
        ]
        + [("add-imaging-libs=", None, "Add libs to _imaging build")]
    )

    def initialize_options(self):
        self.disable_platform_guessing = None
        self.add_imaging_libs = ""
        build_ext.initialize_options(self)
        for x in self.feature:
            setattr(self, f"disable_{x}", None)
            setattr(self, f"enable_{x}", None)
        for x in ("raqm", "fribidi"):
            setattr(self, f"vendor_{x}", None)

    def finalize_options(self):
        build_ext.finalize_options(self)
        if self.debug:
            global DEBUG
            DEBUG = True
        if not self.parallel:
            # If --parallel (or -j) wasn't specified, we want to reproduce the same
            # behavior as before, that is, auto-detect the number of jobs.
            try:
                self.parallel = int(
                    os.environ.get("MAX_CONCURRENCY", min(4, os.cpu_count()))
                )
            except TypeError:
                self.parallel = None
        for x in self.feature:
            if getattr(self, f"disable_{x}"):
                setattr(self.feature, x, False)
                self.feature.required.discard(x)
                _dbg("Disabling %s", x)
                if getattr(self, f"enable_{x}"):
                    raise ValueError(
                        f"Conflicting options: --enable-{x} and --disable-{x}"
                    )
                if x == "freetype":
                    _dbg("--disable-freetype implies --disable-raqm")
                    if getattr(self, "enable_raqm"):
                        raise ValueError(
                            "Conflicting options: --enable-raqm and --disable-freetype"
                        )
                    setattr(self, "disable_raqm", True)
            if getattr(self, f"enable_{x}"):
                _dbg("Requiring %s", x)
                self.feature.required.add(x)
                if x == "raqm":
                    _dbg("--enable-raqm implies --enable-freetype")
                    self.feature.required.add("freetype")
        for x in ("raqm", "fribidi"):
            if getattr(self, f"vendor_{x}"):
                if getattr(self, "disable_raqm"):
                    raise ValueError(
                        f"Conflicting options: --vendor-{x} and --disable-raqm"
                    )
                if x == "fribidi" and not getattr(self, "vendor_raqm"):
                    raise ValueError(
                        f"Conflicting options: --vendor-{x} and not --vendor-raqm"
                    )
                _dbg("Using vendored version of %s", x)
                self.feature.vendor.add(x)

    def _update_extension(self, name, framework_list, framework_dirs, library_list, library_dirs, sources = None, define_macros = None):
        for ext in self.extensions:
            if ext.name == name:
                if sys.platform == 'darwin':
                    for dir in framework_dirs:
                        ext.extra_link_args.extend(['-Wl,-F{}'.format(dir)])
                    for framework in framework_list:
                        ext.extra_link_args.extend(['-framework', framework])
                    ext.extra_link_args.extend(['-Wl,-rpath,@loader_path/../../../../Frameworks/'])
                    ext.extra_link_args.extend(['-mmacosx-version-min=@CMAKE_OSX_DEPLOYMENT_TARGET@'])
                elif sys.platform == 'win32':
                    for library in library_list:
                        ext.libraries.append(library)
                    for dir in library_dirs:
                        ext.library_dirs.append(dir)
                if define_macros is not None:
                    ext.define_macros += define_macros
                if sources is not None:
                    ext.sources += sources
                break

    def _remove_extension(self, name):
        for extension in self.extensions:
            if extension.name == name:
                self.extensions.remove(extension)
                break

    def get_macos_sdk_path(self):
        try:
            sdk_path = (
                subprocess.check_output(["xcrun", "--show-sdk-path"])
                .strip()
                .decode("latin1")
            )
        except Exception:
            sdk_path = None
        if (
            not sdk_path
            or sdk_path == "/Applications/Xcode.app/Contents/Developer"
            "/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
        ):
            commandlinetools_sdk_path = (
                "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
            )
            if os.path.exists(commandlinetools_sdk_path):
                sdk_path = commandlinetools_sdk_path
        return sdk_path

    def build_extensions(self):

        library_dirs = []
        include_dirs = []

        

        # respect CFLAGS/CPPFLAGS/LDFLAGS
        for k in ("CFLAGS", "CPPFLAGS", "LDFLAGS"):
            if k in os.environ:
                for match in re.finditer(r"-I([^\s]+)", os.environ[k]):
                    _add_directory(include_dirs, match.group(1))
                for match in re.finditer(r"-L([^\s]+)", os.environ[k]):
                    _add_directory(library_dirs, match.group(1))

        # include, rpath, if set as environment variables:
        for k in ("C_INCLUDE_PATH", "CPATH", "INCLUDE"):
            if k in os.environ:
                for d in os.environ[k].split(os.path.pathsep):
                    _add_directory(include_dirs, d)

        for k in ("LD_RUN_PATH", "LIBRARY_PATH", "LIB"):
            if k in os.environ:
                for d in os.environ[k].split(os.path.pathsep):
                    _add_directory(library_dirs, d)

        _add_directory(library_dirs, os.path.join(sys.prefix, "lib"))
        _add_directory(include_dirs, os.path.join(sys.prefix, "include"))
        
        _add_directory(include_dirs, '@FREETYPE_INCLUDE_DIRS@')
        _add_directory(include_dirs, '@JPEG_INCLUDE_DIRS@')
        _add_directory(include_dirs, '@OPENJPEG_INCLUDE_DIRS@')
        _add_directory(include_dirs, '@TIFF_INCLUDE_DIRS@')
        _add_directory(include_dirs, '@ZLIB_INCLUDE_DIRS@')
        _add_directory(include_dirs, '@LCMS_INCLUDE_DIRS@')
        _add_directory(include_dirs, '@WEBP_INCLUDE_DIRS@')
        _add_directory(include_dirs, '@WEBPMUX_INCLUDE_DIRS@')
        _add_directory(include_dirs, '@WEBPDEMUX_INCLUDE_DIRS@')

        #
        # insert new dirs *before* default libs, to avoid conflicts
        # between Python PYD stub libs and real libraries

        self.compiler.library_dirs = library_dirs + self.compiler.library_dirs
        self.compiler.include_dirs = include_dirs + self.compiler.include_dirs

        #
        # look for available libraries

        feature = self.feature
        
        feature.zlib = "zlib"
        feature.jpeg = "libjpeg"
        feature.jpeg2000 = 'openjp2'
        feature.openjpeg_version = '@OPENJPEG_VERSION@'
        feature.freetype = "freetype"
        feature.lcms = "lcms2"
        feature.webp = "webp"
        feature.webpmux = "webpmux"
        feature.tiff = "tiff"

        #
        # core library

        libs = self.add_imaging_libs.split()
        defs = []
        if feature.jpeg:
            #libs.append(feature.jpeg)
            defs.append(("HAVE_LIBJPEG", None))
        if feature.jpeg2000:
            #libs.append(feature.jpeg2000)
            defs.append(("HAVE_OPENJPEG", None))
            #if sys.platform == "win32" and not PLATFORM_MINGW:
            #    defs.append(("OPJ_STATIC", None))
        if feature.zlib:
            #libs.append(feature.zlib)
            defs.append(("HAVE_LIBZ", None))
        if feature.imagequant:
            #libs.append(feature.imagequant)
            defs.append(("HAVE_LIBIMAGEQUANT", None))
        if feature.tiff:
            #libs.append(feature.tiff)
            defs.append(("HAVE_LIBTIFF", None))
            if sys.platform == "win32":
                # This define needs to be defined if-and-only-if it was defined
                # when compiling LibTIFF. LibTIFF doesn't expose it in `tiffconf.h`,
                # so we have to guess; by default it is defined in all Windows builds.
                # See #4237, #5243, #5359 for more information.
                defs.append(("USE_WIN32_FILEIO", None))
        if feature.xcb:
            #libs.append(feature.xcb)
            defs.append(("HAVE_XCB", None))
        if sys.platform == "win32":
            libs.extend(["kernel32", "user32", "gdi32"])
        if struct.unpack("h", b"\0\1")[0] == 1:
            defs.append(("WORDS_BIGENDIAN", None))

        if (
            sys.platform == "win32"
            and sys.version_info < (3, 9)
            and not (PLATFORM_PYPY or PLATFORM_MINGW)
        ):
            defs.append(("PILLOW_VERSION", f'"\\"{PILLOW_VERSION}\\""'))
        else:
            defs.append(("PILLOW_VERSION", f'"{PILLOW_VERSION}"'))
        
        frameworks = ['@JPEG_FRAMEWORK@', '@OPENJPEG_FRAMEWORK@', '@TIFF_FRAMEWORK@']
        framework_dirs = ['@JPEG_FRAMEWORK_DIRS@', '@OPENJPEG_FRAMEWORK_DIRS@', '@TIFF_FRAMEWORK_DIRS@']
        libraries = ['@JPEG_LIBRARY@', '@OPENJPEG_LIBRARY@', '@TIFF_LIBRARY@', ]
        library_dirs = ['@JPEG_LIBRARY_DIR@', '@OPENJPEG_LIBRARY_DIR@', '@TIFF_LIBRARY_DIR@']
        if sys.platform == 'win32':
            frameworks.append('@ZLIB_FRAMEWORK@')
            framework_dirs.append('@ZLIB_FRAMEWORK_DIRS@')
            libraries.extend(['@ZLIB_LIBRARY@', 'kernel32', 'user32', 'gdi32'])
            library_dirs.append('@ZLIB_LIBRARY_DIR@')
        #self._update_extension("PIL._imaging", '', '', '@ZLIB_LIBRARIES@', '')

        self._update_extension("PIL._imaging", 
            frameworks,
            framework_dirs,
            libraries,
            library_dirs,
            None, defs)
        
        #
        # additional libraries

        if feature.freetype:
            srcs = []
            libs = ["freetype"]
            defs = []
            if feature.raqm:
                if not feature.want_vendor("raqm"):  # using system Raqm
                    defs.append(("HAVE_RAQM", None))
                    defs.append(("HAVE_RAQM_SYSTEM", None))
                    libs.append(feature.raqm)
                else:  # building Raqm from src/thirdparty
                    defs.append(("HAVE_RAQM", None))
                    srcs.append("src/thirdparty/raqm/raqm.c")
                    libs.append(feature.harfbuzz)
                    if not feature.want_vendor("fribidi"):  # using system FriBiDi
                        defs.append(("HAVE_FRIBIDI_SYSTEM", None))
                        libs.append(feature.fribidi)
                    else:  # building FriBiDi shim from src/thirdparty
                        srcs.append("src/thirdparty/fribidi-shim/fribidi.c")
            self._update_extension("PIL._imagingft", ['@FREETYPE_FRAMEWORK@'], ['@FREETYPE_FRAMEWORK_DIRS@'], ['@FREETYPE_LIBRARY@'], ['@FREETYPE_LIBRARY_DIR@'], srcs)

        else:
            self._remove_extension("PIL._imagingft")

        if feature.lcms:
            extra = []
            libraries = ['@LCMS_LIBRARY@']
            if sys.platform == "win32":
                libraries.extend(['user32', 'gdi32'])
            self._update_extension("PIL._imagingcms", ['@LCMS_FRAMEWORK@'], ['@LCMS_FRAMEWORK_DIRS@'], libraries, ['@LCMS_LIBRARY_DIR@'])
        else:
            self._remove_extension("PIL._imagingcms")

        if feature.webp:
            libs = [feature.webp]
            defs = []

            if feature.webpmux:
                defs.append(("HAVE_WEBPMUX", None))
                libs.append(feature.webpmux)
                libs.append(feature.webpmux.replace("pmux", "pdemux"))

            self._update_extension("PIL._webp",
                ['@WEBP_FRAMEWORK@', '@WEBPMUX_FRAMEWORK@', '@WEBPDEMUX_FRAMEWORK@'],
                ['@WEBP_FRAMEWORK_DIRS@', '@WEBPMUX_FRAMEWORK_DIRS@', '@WEBPDEMUX_FRAMEWORK_DIRS@'],
                ['@WEBP_LIBRARY@', '@WEBPMUX_LIBRARY@', '@WEBPDEMUX_LIBRARY@'],
                ['@WEBP_LIBRARY_DIR@'])
        else:
            self._remove_extension("PIL._webp")

        tk_libs = ["psapi"] if sys.platform in ("win32", "cygwin") else []
        self._update_extension("PIL._imagingtk", [], [], tk_libs, [])

        build_ext.build_extensions(self)

        #
        # sanity checks

        self.summary_report(feature)

    def summary_report(self, feature):

        print("-" * 68)
        print("PIL SETUP SUMMARY")
        print("-" * 68)
        print(f"version      Pillow {PILLOW_VERSION}")
        v = sys.version.split("[")
        print(f"platform     {sys.platform} {v[0].strip()}")
        for v in v[1:]:
            print(f"             [{v.strip()}")
        print("-" * 68)

        raqm_extra_info = ""
        if feature.want_vendor("raqm"):
            raqm_extra_info += "bundled"
            if feature.want_vendor("fribidi"):
                raqm_extra_info += ", FriBiDi shim"

        options = [
            (feature.jpeg, "JPEG"),
            (feature.jpeg2000, "OPENJPEG (JPEG2000)", feature.openjpeg_version),
            (feature.zlib, "ZLIB (PNG/ZIP)"),
            (feature.imagequant, "LIBIMAGEQUANT"),
            (feature.tiff, "LIBTIFF"),
            (feature.freetype, "FREETYPE2"),
            (feature.raqm, "RAQM (Text shaping)", raqm_extra_info),
            (feature.lcms, "LITTLECMS2"),
            (feature.webp, "WEBP"),
            (feature.webpmux, "WEBPMUX"),
            (feature.xcb, "XCB (X protocol)"),
        ]

        all = 1
        for option in options:
            if option[0]:
                extra_info = ""
                if len(option) >= 3 and option[2]:
                    extra_info = f" ({option[2]})"
                print(f"--- {option[1]} support available{extra_info}")
            else:
                print(f"*** {option[1]} support not available")
                all = 0

        print("-" * 68)

        if not all:
            print("To add a missing option, make sure you have the required")
            print("library and headers.")
            print(
                "See https://pillow.readthedocs.io/en/latest/installation."
                "html#building-from-source"
            )
            print("")

        print("To check the build, run the selftest.py script.")
        print("")


def debug_build():
    return hasattr(sys, "gettotalrefcount") or FUZZING_BUILD


files = ["src/_imaging.c"]
for src_file in _IMAGING:
    files.append("src/" + src_file + ".c")
for src_file in _LIB_IMAGING:
    files.append(os.path.join("src/libImaging", src_file + ".c"))
ext_modules = [
    Extension("PIL._imaging", files),
    Extension("PIL._imagingft", ["src/_imagingft.c"]),
    Extension("PIL._imagingcms", ["src/_imagingcms.c"]),
    Extension("PIL._webp", ["src/_webp.c"]),
    Extension("PIL._imagingtk", ["src/_imagingtk.c", "src/Tk/tkImaging.c"]),
    Extension("PIL._imagingmath", ["src/_imagingmath.c"]),
    Extension("PIL._imagingmorph", ["src/_imagingmorph.c"]),
]

try:
    setup(
        version=PILLOW_VERSION,
        cmdclass={"build_ext": pil_build_ext},
        ext_modules=ext_modules,
        include_package_data=True,
        packages=["PIL"],
        package_dir={"": "src"},
        zip_safe=not (debug_build() or PLATFORM_MINGW),
    )
except RequiredDependencyException as err:
    msg = f"""

The headers or library files could not be found for {str(err)},
a required dependency when compiling Pillow from source.

Please see the install instructions at:
   https://pillow.readthedocs.io/en/latest/installation.html

"""
    sys.stderr.write(msg)
    raise RequiredDependencyException(msg)
except DependencyException as err:
    msg = f"""

The headers or library files could not be found for {str(err)},
which was requested by the option flag --enable-{str(err)}

"""
    sys.stderr.write(msg)
    raise DependencyException(msg)
